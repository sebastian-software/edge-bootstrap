#!/usr/bin/env node
/* eslint-disable */

const path = require("path")
const fs = require("fs")

const tar = require("tar")
const git = require("simple-git/promise")

const micromatch = require("micromatch")
const gitignore = require("parse-gitignore")

console.log("prepack node script")

const CWD = process.cwd()
const TEMPLATE_PATH = path.join(CWD, "template.tar")
const EDGE_BASE_PATH = path.join(CWD, "..", "edge")
const EDGE_BOILERPLATE_PATH = path.join(EDGE_BASE_PATH, "packages", "edge-boilerplate")
const GIT_IGNORE = path.join(EDGE_BASE_PATH, ".gitignore")

try {
  fs.accessSync(EDGE_BASE_PATH, fs.constants.R_OK)
  fs.accessSync(EDGE_BOILERPLATE_PATH, fs.constants.R_OK)
} catch (error) {
  console.error(`Path ${EDGE_BOILERPLATE_PATH} is not accessible`)
  console.error("The edge git repo should be placed beside the edge-create repo")
  process.exit(2)
}

function version(tag) {
  return tag.split("@")[1]
}

async function main() {
  // Check for latest edge-boilerplate tag
  const edgeGit = git(EDGE_BASE_PATH)
  if (!await edgeGit.checkIsRepo()) {
    console.log(`Edge path ${EDGE_BASE_PATH} is no git repository`)
    process.exit(1)
  }

  await edgeGit.fetch()

  if (await edgeGit.raw(["status", "--porcelain"])) {
    console.log(`Edge path ${EDGE_BASE_PATH} is no clean git repository`)
    process.exit(1)
  }

  const tags = await edgeGit.tags()
  const latestTag = tags.all.filter((item) => item.startsWith("edge-boilerplate")).pop()
  const revList = await edgeGit.raw(["rev-list", "-n", "1", latestTag])
  const edgeHead = await edgeGit.revparse(["HEAD"])

  if (revList !== edgeHead) {
    console.log(
      `Edge path ${EDGE_BASE_PATH} is not revision of latest edge-boilerplate tag`
    )
    process.exit(1)
  }

  const gitignorePattern = gitignore(GIT_IGNORE)
  function filter(path) {
    return !micromatch.any(path, gitignorePattern)
  }

  // Create template.tar from edge-boilerplate code
  await tar.create(
    {
      file: TEMPLATE_PATH,
      cwd: EDGE_BOILERPLATE_PATH,
      follow: true,
      filter
    },
    ["."]
  )
  console.log("template.tar created")
  process.exit(0)
}

main().catch((error) => {
  console.error(error.stack)
  process.exit(1)
})
